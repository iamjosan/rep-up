#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("my-express-app:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/*
* Set view engine
*/
app.set("view engine", "jade");

/**
 * Listen to browser with socket.io
 */

const io = require("socket.io")(server);
const pool = require("../routes/dbConnect");
//file upload with socket.io
const siofu = require("socketio-file-upload");
app.use(siofu.router);
//use this to create hashes for passwords
const hash = require("string-hash");
//send email with this
const sendMail = require("./sendMail");
//approve or reject users and reps
const newApproval = require("./newApproval");
const fetchUser = require("./fetchUser");
const userRegister = require("./userRegister");
const userLogin = require("./userLogin");
const fetchUsersAll = require("./fetchUsersAll");
const changeProfileInfo = require("./changeProfileInfo");
const uploadFile = require("./uploadFile");
const updateUserPrivileges = require("./updateUserPrivileges");

io.on("connection", client => {
  console.log("client connected");

  newApproval(client, pool, sendMail);
  fetchUser(client, pool);
  userRegister(client, pool, sendMail, hash);
  userLogin(client, pool, hash);
  fetchUsersAll(client, pool);
  changeProfileInfo(client, pool, hash);
  updateUserPrivileges(client, pool);
  //file upload
  let uploader = new siofu();
  uploadFile(uploader, client, pool);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
