#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("my-express-app:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen to browser with socket.io
 */

const io = require("socket.io")(server);
const dbConn = require("../routes/dbConnect");
//file upload with socket.io
const siofu = require("socketio-file-upload");
app.use(siofu.router);
//use this to create hashes for passwords
const hash = require("string-hash");

io.on("connection", client => {
  console.log("client connected");
  client.on("fetch user", username => {
    let sqlGetUser =
      "SELECT users.username, users.avatar, COUNT(experience.user_id) AS rep FROM users LEFT JOIN experience ON users.id = experience.user_id AND experience.approved = 1 WHERE users.username = ? AND users.approved = 1 GROUP BY users.username";
    dbConn.query(sqlGetUser, [username], (err, result, fields) => {
      if (err) throw err;
      client.emit("send user", result);
    });
  });

  client.on("user register", register => {
    //remove all whitespaces and make lowercase
    register.username = register.username.replace(/\s/g, "").toLowerCase();
    //check if username has been registered
    dbConn.query(
      "SELECT username FROM users WHERE  username = ?",
      [register.username],
      (err, result, fields) => {
        if (err) throw err;
        if (result.length > 0) {
          return client.emit("user register", {
            msg: "Username is taken",
            msgColor: "red"
          });
        }
        //get today's date and style it to be year-month-day
        let d = new Date(),
          today = [d.getFullYear(), d.getMonth() + 1, d.getDate()],
          dateToday = today.join("-");

        dbConn.query(
          "INSERT INTO users (username, email, password, gll_name, date_join) VALUES (?, ?, ?, ?, ?)",
          [
            register.username,
            register.email,
            hash(register.password),
            register.gllName,
            dateToday
          ],
          (err, result, fields) => {
            if (err) throw err;

            client.emit("user register", {
              msg: "Awaiting Approval",
              msgColor: "green"
            });
          }
        );
      }
    );
  });

  client.on("user login", login => {
    console.log(hash(login.password));
    let sqlLogin =
      "SELECT users.*, COUNT(experience.user_id) AS rep FROM users LEFT JOIN experience ON users.id = experience.user_id AND experience.approved = 1 WHERE users.username = ?  AND users.approved = 1 AND users.password = ? GROUP BY users.id";
    dbConn.query(
      sqlLogin,
      [login.username, hash(login.password)],
      (err, result, fields) => {
        if (err) throw err;
        console.log(result);
        //if user login doesnt match
        //return false
        result = result.length > 0 ? result : false;
        client.emit("user login", result);
      }
    );
  });

  client.on("fetch users all", data => {
    dbConn.query(
      "SELECT username, avatar FROM users WHERE approved = 1",
      (err, result, fields) => {
        if (err) throw err;
        client.emit("fetch users all", result);
      }
    );
  });

  //file upload
  let uploader = new siofu();
  uploader.dir = "/Users/Admin/my-express-app/proof/pending";
  uploader.listen(client);
  uploader.on("saved", event => {
    //get today's date
    let d = new Date();
    let today = [d.getFullYear(), d.getMonth(), d.getDate()];
    let todaysDate = today.join("-");
    //save to database
    dbConn.query(
      "INSERT INTO experience (user_id, proof, date_added) VALUES (?, ?, ?)",
      [event.file.meta.userId, event.file.name, todaysDate],
      (err, result, fields) => {
        if (err) throw err;
        client.emit("upload file done", "success");
      }
    );
  });
  uploader.on("error", event => console.log(event));
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
